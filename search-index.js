var N=null,E="",T="t",U="u",searchIndex={};
var r_0a="clone_into",r_1a="to_string",r_2a="string",r_3a="sval::stream::stack",r_4a="sval::value",r_5a="formatter",r_6a="serialize",r_7a="clone",r_8a="stack",r_9a="fmt",r_Aa="A value stream.",r_Ba="Stream a format.",r_Ca="arguments",r_Da="Stream a signed integer.",r_Ea="Stream an unsigned integer.",r_Fa="i128",r_Ga="u128",r_Ha="Stream a floating point value.",r_Ia="Stream a boolean.",r_Ja="char",r_Ka="Stream a unicode character.",r_La="Stream an empty value.",r_Ma="Begin a map.",r_Na="End a map.",r_Oa="Begin a sequence.",r_Pa="End a sequence.",r_Qa="try_from",r_Ra="sval::test",r_Sa="try_into",r_Ta="borrow",r_Ua="borrow_mut",r_Va="get_type_id",r_Wa="typeid",r_Xa="from",r_Ya="into",r_Za="to_owned",r_ab="token",r_ba="error",r_bb="ordering",r_ca="self",r_cb="Token",r_da="sval",r_db="Stack",r_ea="stream",r_eb="OwnedValue",r_fa="Error",r_fb="Value",r_ga="An error encountered while visiting a value.",r_gb="Arguments",r_ha="bool",r_hb="Depth",r_ia="depth",r_ja="result",r_ka="pos",r_la="sval::stream",r_ma="begin",r_na="map_begin",r_oa="map_key",r_pa="Begin a map key.",r_qa="map_value",r_ra="Begin a map value.",r_sa="map_end",r_ta="seq_begin",r_ua="option",r_va="usize",r_wa="seq_elem",r_xa="Begin a sequence element.",r_ya="seq_end",r_za="Stream";
var r_aa="sval_json";
searchIndex[r_da]={"doc":"A small, no-std, object-safe, serialization-only framework.","i":[[3,r_fa,r_da,r_ga,N,N],[5,r_ea,E,"Stream the structure of a [`Value`] using the given…",N,N],[11,"custom",E,"Get an error from a format. ",0,N],[11,"as_error",E,"Get a reference to a standard error. ",0,[[[r_ca]],[r_ba]]],[11,"into_error",E,"Convert into a standard error. ",0,[[[r_ca]],["box",[r_ba]]]],[11,"into_io_error",E,"Convert into an io error. ",0,[[[r_ca]],[r_ba]]],[11,"msg",E,"Capture a static message as an error. ",0,[[["str"]],[r_ca]]],[0,"test",E,"Helpers for testing value implementations.",N,N],[4,r_cb,r_Ra,"The kind of token being produced.",N,N],[13,"MapBegin",E,E,1,N],[13,"MapEnd",E,E,1,N],[13,"SeqBegin",E,E,1,N],[13,"SeqEnd",E,E,1,N],[13,"Signed",E,E,1,N],[13,"Unsigned",E,E,1,N],[13,"Float",E,E,1,N],[13,"BigSigned",E,E,1,N],[13,"BigUnsigned",E,E,1,N],[13,"Bool",E,E,1,N],[13,"Str",E,E,1,N],[13,"Char",E,E,1,N],[13,"None",E,E,1,N],[5,"tokens",E,"Collect a value into a sequence of tokens.",N,N],[0,"serde",r_da,"Integration between `sval` and `serde`.",N,N],[5,"to_serialize","sval::serde","Convert a [`Value`] into a [`Serialize`].",N,N],[5,r_6a,E,"Serialize a [`Value`] using the given [`Serializer`].",N,N],[5,"to_value",E,"Convert a [`Serialize`] into a [`Value`].",N,N],[5,r_ea,E,"Stream a [`Serialize`] using the given [`Stream`].",N,N],[0,r_ea,r_da,"A stream for datastructures.",N,N],[3,r_gb,r_la,"This structure represents a safely precompiled version of…",N,N],[3,r_fa,E,r_ga,N,N],[0,r_8a,E,"A fixed-size, stateful stack for streams.",N,N],[3,"Pos",r_3a,"The expected position in the stream.",N,N],[3,r_hb,E,"The depth of a position.",N,N],[3,r_db,E,"A container for the stream state.",N,N],[11,"is_key",E,"Whether the current position is a map key.",2,[[[r_ca]],[r_ha]]],[11,"is_value",E,"Whether the current position is a map value.",2,[[[r_ca]],[r_ha]]],[11,"is_elem",E,"Whether the current position is a sequence element.",2,[[[r_ca]],[r_ha]]],[11,r_ia,E,"The depth of this position.",2,[[[r_ca]],[r_ia]]],[11,"new",E,"Create a new stack.",3,[[],[r_ca]]],[11,"clear",E,"Clear the stack so that it can be re-used.",3,[[[r_ca]]]],[11,r_ma,E,"Ensure the stack is ready for a new value.",3,[[[r_ca]],[r_ja,[r_ba]]]],[11,"primitive",E,"Push a primitive.",3,[[[r_ca]],[r_ja,[r_ka,r_ba]]]],[11,r_na,E,"Begin a new map.",3,[[[r_ca]],[r_ja,[r_ka,r_ba]]]],[11,r_oa,E,r_pa,3,[[[r_ca]],[r_ja,[r_ka,r_ba]]]],[11,r_qa,E,r_ra,3,[[[r_ca]],[r_ja,[r_ka,r_ba]]]],[11,r_sa,E,"Complete the current map.",3,[[[r_ca]],[r_ja,[r_ka,r_ba]]]],[11,r_ta,E,"Begin a new sequence.",3,[[[r_ca]],[r_ja,[r_ka,r_ba]]]],[11,r_wa,E,r_xa,3,[[[r_ca]],[r_ja,[r_ka,r_ba]]]],[11,r_ya,E,"Complete the current sequence.",3,[[[r_ca]],[r_ja,[r_ka,r_ba]]]],[11,"can_end",E,"Whether or not the stack has seen a complete and valid…",3,[[[r_ca]],[r_ha]]],[11,"end",E,"Complete the stack.",3,[[[r_ca]],[r_ja,[r_ba]]]],[8,r_za,r_la,r_Aa,N,N],[11,r_ma,E,"Begin the stream.",4,[[[r_ca]],[r_ja,[r_ba]]]],[10,r_9a,E,r_Ba,4,[[[r_ca],[r_Ca]],[r_ja,[r_ba]]]],[11,"i64",E,r_Da,4,[[[r_ca],["i64"]],[r_ja,[r_ba]]]],[11,"u64",E,r_Ea,4,[[[r_ca],["u64"]],[r_ja,[r_ba]]]],[11,r_Fa,E,"Stream a 128bit signed integer.",4,[[[r_ca],[r_Fa]],[r_ja,[r_ba]]]],[11,r_Ga,E,"Stream a 128bit unsigned integer.",4,[[[r_ca],[r_Ga]],[r_ja,[r_ba]]]],[11,"f64",E,r_Ha,4,[[[r_ca],["f64"]],[r_ja,[r_ba]]]],[11,r_ha,E,r_Ia,4,[[[r_ca],[r_ha]],[r_ja,[r_ba]]]],[11,r_Ja,E,r_Ka,4,[[[r_ca],[r_Ja]],[r_ja,[r_ba]]]],[11,"str",E,"Stream a UTF-8 string slice.",4,[[[r_ca],["str"]],[r_ja,[r_ba]]]],[11,"none",E,r_La,4,[[[r_ca]],[r_ja,[r_ba]]]],[11,r_na,E,r_Ma,4,[[[r_ca],[r_ua,[r_va]]],[r_ja,[r_ba]]]],[11,r_oa,E,r_pa,4,[[[r_ca]],[r_ja,[r_ba]]]],[11,r_qa,E,r_ra,4,[[[r_ca]],[r_ja,[r_ba]]]],[11,r_sa,E,r_Na,4,[[[r_ca]],[r_ja,[r_ba]]]],[11,r_ta,E,r_Oa,4,[[[r_ca],[r_ua,[r_va]]],[r_ja,[r_ba]]]],[11,r_wa,E,r_xa,4,[[[r_ca]],[r_ja,[r_ba]]]],[11,r_ya,E,r_Pa,4,[[[r_ca]],[r_ja,[r_ba]]]],[11,"end",E,"End the stream.",4,[[[r_ca]],[r_ja,[r_ba]]]],[0,"value",r_da,"A streamable value.",N,N],[3,r_za,r_4a,r_Aa,N,N],[3,r_eb,E,"An owned value.",N,N],[3,r_fa,E,r_ga,N,N],[11,"any",E,"Stream a value.",5,N],[11,r_9a,E,r_Ba,5,[[[r_ca],[r_Ca]],[r_ja,[r_ba]]]],[11,"i64",E,r_Da,5,[[[r_ca],["i64"]],[r_ja,[r_ba]]]],[11,"u64",E,r_Ea,5,[[[r_ca],["u64"]],[r_ja,[r_ba]]]],[11,r_Fa,E,"Stream a 128-bit signed integer.",5,[[[r_ca],[r_Fa]],[r_ja,[r_ba]]]],[11,r_Ga,E,"Stream a 128-bit unsigned integer.",5,[[[r_ca],[r_Ga]],[r_ja,[r_ba]]]],[11,"f64",E,r_Ha,5,[[[r_ca],["f64"]],[r_ja,[r_ba]]]],[11,r_ha,E,r_Ia,5,[[[r_ca],[r_ha]],[r_ja,[r_ba]]]],[11,r_Ja,E,r_Ka,5,[[[r_ca],[r_Ja]],[r_ja,[r_ba]]]],[11,"str",E,"Stream a UTF8 string.",5,[[[r_ca],["str"]],[r_ja,[r_ba]]]],[11,"none",E,r_La,5,[[[r_ca]],[r_ja,[r_ba]]]],[11,r_na,E,r_Ma,5,[[[r_ca],[r_ua,[r_va]]],[r_ja,[r_ba]]]],[11,r_oa,E,"Stream a map key.",5,N],[11,r_qa,E,"Stream a map value.",5,N],[11,r_sa,E,r_Na,5,[[[r_ca]],[r_ja,[r_ba]]]],[11,r_ta,E,r_Oa,5,[[[r_ca],[r_ua,[r_va]]],[r_ja,[r_ba]]]],[11,r_wa,E,"Stream a sequence element.",5,N],[11,r_ya,E,r_Pa,5,[[[r_ca]],[r_ja,[r_ba]]]],[11,"map_key_begin",E,r_pa,5,[[[r_ca]],[r_ja,[r_ea,r_ba]]]],[11,"map_value_begin",E,r_ra,5,[[[r_ca]],[r_ja,[r_ea,r_ba]]]],[11,"seq_elem_begin",E,r_xa,5,[[[r_ca]],[r_ja,[r_ea,r_ba]]]],[11,"from_value",E,"Get an owned value from an arbitrary [`Value`].",6,N],[11,"from_shared",E,"Get an owned value from an already shared [`Value`].",6,N],[8,r_fb,E,"A value with a streamable structure.",N,N],[10,r_ea,E,"Stream this value. ",7,[[[r_ca],[r_ea]],[r_ja,[r_ba]]]],[11,r_Qa,r_da,E,0,[[[U]],[r_ja]]],[11,r_Xa,E,E,0,[[[T]],[T]]],[11,r_Sa,E,E,0,[[[r_ca]],[r_ja]]],[11,r_Ya,E,E,0,[[[r_ca]],[U]]],[11,r_Ta,E,E,0,[[[r_ca]],[T]]],[11,r_Ua,E,E,0,[[[r_ca]],[T]]],[11,r_Va,E,E,0,[[[r_ca]],[r_Wa]]],[11,r_1a,E,E,0,[[[r_ca]],[r_2a]]],[11,r_Qa,r_Ra,E,1,[[[U]],[r_ja]]],[11,r_Xa,E,E,1,[[[T]],[T]]],[11,r_Sa,E,E,1,[[[r_ca]],[r_ja]]],[11,r_Ya,E,E,1,[[[r_ca]],[U]]],[11,r_Ta,E,E,1,[[[r_ca]],[T]]],[11,r_Ua,E,E,1,[[[r_ca]],[T]]],[11,r_Va,E,E,1,[[[r_ca]],[r_Wa]]],[11,r_Za,E,E,1,[[[r_ca]],[T]]],[11,r_0a,E,E,1,N],[11,r_Qa,r_la,E,8,[[[U]],[r_ja]]],[11,r_Xa,E,E,8,[[[T]],[T]]],[11,r_Sa,E,E,8,[[[r_ca]],[r_ja]]],[11,r_Ya,E,E,8,[[[r_ca]],[U]]],[11,r_Ta,E,E,8,[[[r_ca]],[T]]],[11,r_Ua,E,E,8,[[[r_ca]],[T]]],[11,r_Va,E,E,8,[[[r_ca]],[r_Wa]]],[11,r_Za,E,E,8,[[[r_ca]],[T]]],[11,r_0a,E,E,8,N],[11,r_1a,E,E,8,[[[r_ca]],[r_2a]]],[11,r_Qa,r_3a,E,2,[[[U]],[r_ja]]],[11,r_Xa,E,E,2,[[[T]],[T]]],[11,r_Sa,E,E,2,[[[r_ca]],[r_ja]]],[11,r_Ya,E,E,2,[[[r_ca]],[U]]],[11,r_Ta,E,E,2,[[[r_ca]],[T]]],[11,r_Ua,E,E,2,[[[r_ca]],[T]]],[11,r_Va,E,E,2,[[[r_ca]],[r_Wa]]],[11,r_Za,E,E,2,[[[r_ca]],[T]]],[11,r_0a,E,E,2,N],[11,r_Qa,E,E,9,[[[U]],[r_ja]]],[11,r_Xa,E,E,9,[[[T]],[T]]],[11,r_Sa,E,E,9,[[[r_ca]],[r_ja]]],[11,r_Ya,E,E,9,[[[r_ca]],[U]]],[11,r_Ta,E,E,9,[[[r_ca]],[T]]],[11,r_Ua,E,E,9,[[[r_ca]],[T]]],[11,r_Va,E,E,9,[[[r_ca]],[r_Wa]]],[11,r_Za,E,E,9,[[[r_ca]],[T]]],[11,r_0a,E,E,9,N],[11,r_Qa,E,E,3,[[[U]],[r_ja]]],[11,r_Xa,E,E,3,[[[T]],[T]]],[11,r_Sa,E,E,3,[[[r_ca]],[r_ja]]],[11,r_Ya,E,E,3,[[[r_ca]],[U]]],[11,r_Ta,E,E,3,[[[r_ca]],[T]]],[11,r_Ua,E,E,3,[[[r_ca]],[T]]],[11,r_Va,E,E,3,[[[r_ca]],[r_Wa]]],[11,r_Za,E,E,3,[[[r_ca]],[T]]],[11,r_0a,E,E,3,N],[11,r_Qa,r_4a,E,5,[[[U]],[r_ja]]],[11,r_Xa,E,E,5,[[[T]],[T]]],[11,r_Sa,E,E,5,[[[r_ca]],[r_ja]]],[11,r_Ya,E,E,5,[[[r_ca]],[U]]],[11,r_Ta,E,E,5,[[[r_ca]],[T]]],[11,r_Ua,E,E,5,[[[r_ca]],[T]]],[11,r_Va,E,E,5,[[[r_ca]],[r_Wa]]],[11,r_Qa,E,E,6,[[[U]],[r_ja]]],[11,r_Xa,E,E,6,[[[T]],[T]]],[11,r_Sa,E,E,6,[[[r_ca]],[r_ja]]],[11,r_Ya,E,E,6,[[[r_ca]],[U]]],[11,r_Ta,E,E,6,[[[r_ca]],[T]]],[11,r_Ua,E,E,6,[[[r_ca]],[T]]],[11,r_Va,E,E,6,[[[r_ca]],[r_Wa]]],[11,r_9a,r_la,E,8,[[[r_ca],[r_5a]],[r_ja,[r_ba]]]],[11,r_7a,E,E,8,[[[r_ca]],[r_Ca]]],[11,r_9a,E,E,8,[[[r_ca],[r_5a]],[r_ja,[r_ba]]]],[11,r_6a,E,E,8,[[[r_ca],["s"]],[r_ja]]],[11,r_ea,E,E,8,[[[r_ca],[r_ea]],[r_ja,[r_ba]]]],[11,r_ea,r_4a,E,6,[[[r_ca],[r_ea]],[r_ja,[r_ba]]]],[11,r_7a,r_Ra,E,1,[[[r_ca]],[r_ab]]],[11,r_7a,r_3a,E,2,[[[r_ca]],[r_ka]]],[11,r_7a,E,E,9,[[[r_ca]],[r_ia]]],[11,r_7a,E,E,3,[[[r_ca]],[r_8a]]],[11,r_9a,r_da,E,0,[[[r_ca],[r_5a]],[r_ja]]],[11,r_9a,E,E,0,[[[r_ca],[r_5a]],[r_ja]]],[11,r_9a,r_Ra,E,1,[[[r_ca],[r_5a]],[r_ja]]],[11,"eq",E,E,1,[[[r_ca],[r_ab]],[r_ha]]],[11,"ne",E,E,1,[[[r_ca],[r_ab]],[r_ha]]],[11,"eq",r_3a,E,9,[[[r_ca],[r_ia]],[r_ha]]],[11,"ne",E,E,9,[[[r_ca],[r_ia]],[r_ha]]],[11,"cmp",E,E,9,[[[r_ca],[r_ia]],[r_bb]]],[11,"partial_cmp",E,E,9,[[[r_ca],[r_ia]],[r_ua,[r_bb]]]],[11,"lt",E,E,9,[[[r_ca],[r_ia]],[r_ha]]],[11,"le",E,E,9,[[[r_ca],[r_ia]],[r_ha]]],[11,"gt",E,E,9,[[[r_ca],[r_ia]],[r_ha]]],[11,"ge",E,E,9,[[[r_ca],[r_ia]],[r_ha]]],[11,r_Xa,r_da,E,0,[[["e"]],[r_ca]]],[11,"default",r_3a,E,3,[[],[r_ca]]],[11,"as_ref",r_da,E,0,[[[r_ca]],[r_ba]]]],"p":[[3,r_fa],[4,r_cb],[3,"Pos"],[3,r_db],[8,r_za],[3,r_za],[3,r_eb],[8,r_fb],[3,r_gb],[3,r_hb]]};
searchIndex[r_aa]={"doc":"Json support for `sval`.","i":[[5,"to_fmt",r_aa,"Write a [`sval::Value`] to a formatter.",N,N],[5,r_1a,E,"Write a [`sval::Value`] to a string.",N,N],[5,"to_writer",E,"Write a [`sval::Value`] to a writer.",N,N]],"p":[]};
initSearch(searchIndex);addSearchOptions(searchIndex);